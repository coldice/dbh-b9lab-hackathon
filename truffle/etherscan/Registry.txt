pragma solidity ^0.4.5;

contract Registry {
    struct Info {
        bytes32 name;
        uint pointType;
        string location;
    }
    mapping (address => Info) public infos;
    mapping (bytes32 => address) public addresses;

    event LogInfoChanged(address indexed who, bytes32 indexed name, uint indexed pointType, string location);

    function setInfo(bytes32 name, uint pointType, string location) returns (bool successful) {
        if (name != 0 // It is ok to set your name back to empty string
            && addresses[name] != 0 // It is taken for real
            && addresses[name] != msg.sender) { // This name is given to someone else
            // Already taken
            throw;
        }
        if (infos[msg.sender].name != "") { // If the sender had previously set a name
            addresses[infos[msg.sender].name] = 0; // His former name will map to 0
        }
        infos[msg.sender].name = name;
        infos[msg.sender].pointType = pointType;
        infos[msg.sender].location = location;
        if (name != 0) {
            addresses[name] = msg.sender;
        }
        LogInfoChanged(msg.sender, name, pointType, location);
        return true;
    }
}


address: 0x18a23bb5a7811df1b3ccadec591a0711ce5b00a0
compiler: 0.4.8
optimisation: true